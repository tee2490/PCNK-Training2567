@page "/food"
@inject FoodService fs;
@inject IJSRuntime JsRuntime

<h3>Food</h3>


<EditForm Model="@food" OnValidSubmit="Submit" FormName="FoodForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText class="form-control" @bind-Value="food.Name" />
        <ValidationMessage For="@(()=>food.Name)" />
    </div>

    @*     <div class="form-group">
        <label for="name">Type:</label>
        <InputNumber class="form-control" @bind-Value="food.Type" />
        <ValidationMessage For="@(()=>food.Type)" />
    </div> *@

    <div class="form-group d-flex my-2">

        <label for="name">Type:</label>

        <InputRadioGroup @bind-Value="food.Type">

            @foreach (var type in Enum.GetValues<SD.Types>())
            {
                <div class="mx-2">
                    <label>
                        <InputRadio Value="type" />
                        @type
                    </label>
                </div>
            }

        </InputRadioGroup>

        <ValidationMessage For="@(()=>food.Type)" />

    </div>

    <div class="form-group">
        <label for="name">Cost:</label>
        <InputNumber class="form-control" @bind-Value="food.Cost" />
        <ValidationMessage For="@(()=>food.Cost)" />
    </div>

    <div class="form-group">
        <label for="name">Cal:</label>
        <InputNumber class="form-control" @bind-Value="food.Cal" />
        <ValidationMessage For="@(()=>food.Cal)" />
    </div>


    @foreach (var topping in Enum.GetValues<SD.Topping>())
    {
        <div>
            <input type="checkbox" checked=@food.Topping.Contains(topping) value="@topping" @onchange="(e) => ToggleCategory(topping, e.Value)" />
            <label>@topping</label>
        </div>
    }

    <h4>Selected Categories:</h4>
    <ul>
        @foreach (var topping in food.Topping)
        {
            <li>@topping</li>
        }
    </ul>



    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>


@if (fs.Foods.Count() == 0)
{
    <p><em>No data.</em></p>
}
else
{
    <button class="btn btn-dark m-4" @onclick="Add">Add new food</button>
    <button class="btn btn-dark m-4" @onclick="()=>SortbyName()">
        @if (sortStatus)
        {
            <span>มากไปน้อย</span>
        }
        else
        {
            <span>น้อยไปมาก</span>
        }
    </button>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th @onclick="@(() => SortbyName("Name"))" class="text-decoration-underline text-danger" aria-label="Temperature in Celsius">Name</th>
                <th @onclick="@(() => SortbyName("Type"))" class="text-decoration-underline text-danger" aria-label="Temperature in Farenheit">Type</th>
                <th @onclick="@(() => SortbyName("Cost"))" class="text-decoration-underline text-danger" aria-label="Temperature in Farenheit">
                    Cost
                </th>

                <th @onclick="@(() => SortbyName("Cal"))" class="text-decoration-underline text-danger" aria-label="Temperature in Farenheit">Call</th>
                <th aria-label="Temperature in Farenheit">Topping</th>
                <th>Cost Rate</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var f in fs.Foods)
            {
                <tr>
                    <td>@f.Id</td>
                    <td>@f.Name</td>
                    <td>@f.Type</td>
                    <td>@f.Cost.ToString("#,###.00")</td>
                    <td>@f.Cal.ToString("#,###.00")</td>
                    <td>
                        @foreach (var topping in f.Topping)
                        {
                            <p>@topping</p>

                        }
                    </td>
                    <td>@f.CostRate()</td>
                    <td>
                        <button class="btn btn-danger" @onclick="()=>Delete(f.Id)">Delete</button>
                        <button class="btn btn-success" @onclick="()=>Edit(f.Id)">Edit</button>
                    </td>
                </tr>
            }

            <br />
            <tr>
                <th></th>
                <th aria-label="Temperature in Celsius"></th>
                <th aria-label="Temperature in Farenheit"></th>
                <th aria-label="Temperature in Farenheit">Cost</th>
                <th aria-label="Temperature in Farenheit">Call</th>
                <th></th>
            </tr>


            <tr>
                <td></td>
                <td></td>
                <td>Max</td>
                <td>@fs.Foods.Max(px => px.Cost).ToString("#,###.00")</td>
                <td>@fs.Foods.Max(px => px.Cal).ToString("#,###.00")</td>
                <td></td>
            </tr>

            <tr>
                <td></td>
                <td></td>
                <td>Min</td>
                <td>@fs.Foods.Min(px => px.Cost).ToString("#,###.00")</td>
                <td>@fs.Foods.Min(px => px.Cal).ToString("#,###.00")</td>
                <td></td>
            </tr>

            <tr>
                <td></td>
                <td></td>
                <td>Average</td>
                <td>@fs.Foods.Average(px => px.Cost).ToString("#,###.00")</td>
                <td>@fs.Foods.Average(px => px.Cal).ToString("#,###.00")</td>
                <td></td>
            </tr>



        </tbody>
    </table>

    <br />
    <hr />

    @foreach (var type in fs.GroupByType())
    {
        <h2>Type : @type.Key</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th aria-label="Temperature in Celsius">Name</th>
                    <th aria-label="Temperature in Farenheit">Type</th>
                    <th aria-label="Temperature in Farenheit">Cost</th>
                    <th aria-label="Temperature in Farenheit">Call</th>
                    <th>Cost Rate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in type)
                {
                    <tr>
                        <td>@f.Id</td>
                        <td>@f.Name</td>
                        <td>@f.Type</td>
                        <td>@f.Cost.ToString("#,###.00")</td>
                        <td>@f.Cal.ToString("#,###.00")</td>
                        <td>@f.CostRate()</td>
                    </tr>
                }

            </tbody>
        </table>
    }



}

@code {

    [SupplyParameterFromForm(Name = "FoodForm")]
    private Model.Food food { get; set; } = new();

    private bool sortStatus = true;

    void Toggle()
    {
        sortStatus = !sortStatus;
    }

    public void Submit()
    {
        if (food.Id == 0)
            fs.Add(food);
        else
            fs.Edit(food);

        food = new();

        //JsRuntime.InvokeAsync<bool>("alert", "Success");
    }

    public void Add()
    {
        food = new();
    }

    public void Edit(int id)
    {
        var p = fs.FindbyId(id);

        if (p != null)
        {

            food = new()
                {
                    Id = p.Id,
                    Name = p.Name,
                    Cost = p.Cost,
                    Cal = p.Cal,
                    Type = p.Type,
                    Topping = new List<SD.Topping>(p.Topping)
                };

        }
    }

    public async Task Delete(int id)
    {

        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            fs.Delete(id);
        }
    }


    private void ToggleCategory(SD.Topping topping, object? isChecked)
    {
        if (isChecked is bool checkedValue && checkedValue)
        {
            if (!food.Topping.Contains(topping))
            {
                food.Topping.Add(topping);
            }
        }
        else
        {
            food.Topping.Remove(topping);
        }
    }

    void SortbyName(string propertyName = "Id")
    {
        // string propertyName = "Cal";

        if (sortStatus)
            fs.Foods = fs.Foods
            .OrderByDescending(px => px.GetType().GetProperty(propertyName)?.GetValue(px, null)).ToList();
        else
            fs.Foods = fs.Foods
            .OrderBy(px => px.GetType().GetProperty(propertyName)?.GetValue(px, null)).ToList();
        sortStatus = !sortStatus;
    }



}
